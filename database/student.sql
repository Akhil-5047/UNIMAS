DROP SEQUENCE STUDENT_MTECH_ROLL;
DROP SEQUENCE STUDENT_BTECH_ROLL;

ALTER SESSION SET NLS_DATE_FORMAT='DD-MM-YYYY'; 

CREATE SEQUENCE STUDENT_BTECH_ROLL 
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE STUDENT_MTECH_ROLL
START WITH 40001
INCREMENT BY 1;



SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE add_student
(
    sname IN varchar2,
    batch IN int,
    dept in int,
    email IN varchar2,
    phone IN varchar2,
    gender IN varchar2, 
    dob IN date,
    program IN varchar2,
    address IN varchar2, PASSWORD IN VARCHAR2,
    SROLL2 OUT VARCHAR2
)    
  AS 
    ROLL INT := 0;
    BCODE VARCHAR2(4);
    SROLL VARCHAR2(9); 
BEGIN
    select code into BCODE FROM DEPARTMENT D WHERE D.DEPT_ID = dept;

    IF program = 'B.Tech'
        THEN ROLL := STUDENT_BTECH_ROLL.NEXTVAL;
            IF ROLL < 10
                THEN SROLL :=  to_char(sysdate, 'YY')  || BCODE || '1000' || TO_CHAR(ROLL);         
            ELSIF ROLL < 100
                THEN SROLL := to_char(sysdate, 'YY') || BCODE || '100' || TO_CHAR(ROLL); 
            ELSE SROLL := to_char(sysdate, 'YY') || BCODE || '10' || TO_CHAR(ROLL) ;
            END IF;
    ELSE ROLL := STUDENT_MTECH_ROLL.NEXTVAL;
    SROLL := to_char(sysdate, 'YY') || BCODE || TO_CHAR(ROLL);
    END IF;
     
    
    INSERT INTO PERSON VALUES (EMAIL, PASSWORD);

    SROLL2 := SROLL;
    INSERT INTO STUDENT VALUES ( sroll, sname, batch, dept, EMAIL, PHONE, gender, dob, PROGRAM , ADDRESS );
    DBMS_OUTPUT.PUT_LINE(ROLL || ' OO ' || SROLL);
END add_student; 
/ 
 
 

SET SERVEROUTPUT ON; 
DECLARE SROLL VARCHAR2(9);
BEGIN
--DBMS_OUTPUT.PUT_LINE(STUDENT_MTECH_ROLL.NEXTVAL);
  add_student('VIMAL2',2020,1,'sri5@s123.com',9876543210,'M','07-05-2000','B.Tech','GUNTUR, AP','pass',SROLL );
  DBMS_OUTPUT.PUT_LINE(SROLL);
END;
/
--
 
CREATE OR REPLACE TRIGGER STU__UPDATE_CHECK 
BEFORE UPDATE ON STUDENT
FOR EACH ROW
BEGIN
   
    IF :NEW.SROLL <> :OLD.SROLL  
        THEN RAISE_APPLICATION_ERROR(-20000, 'ROLL NUMBER CANNOT BE CHANGED');
    ELSIF :NEW.EMAIL <> :OLD.EMAIL 
        THEN RAISE_APPLICATION_ERROR(-20000, 'EMAIL ID CANNOT BE CHANGED');
    END IF;
    
END;
/
 
-- update student set email = '1' where sroll = '19CS10001';

--GPALIST VIEW
CREATE OR REPLACE VIEW GPALIST AS SELECT SROLL,SNAME,BATCH,SEMNO, GPA,DEPT_ID FROM
(SELECT  SROLL, SEMNO, ROUND(SUM(GRADE*CREDITS) /SUM(CREDITS) , 2) AS GPA FROM 
         (SELECT G.SROLL, G.course_id , G.GRADE, C.CREDITS,C.SEMNO FROM SCORE G, COURSE C WHERE G.course_id = C.course_id) GROUP BY SROLL, SEMNO )
    NATURAL JOIN STUDENT S ORDER BY BATCH, SEMNO ;    

SELECT * FROM GPALIST;

 

--BATCH WISE, SEM WISE TOPPERS
SELECT * FROM GPALIST G WHERE (G.BATCH, G.SEMNO, G.GPA) IN 
    (SELECT BATCH, SEMNO,  MAX(GPA) FROM GPALIST GROUP BY BATCH , SEMNO)  ORDER BY BATCH, SEMNO; 
 
CREATE OR REPLACE VIEW CGPALIST AS 
	SELECT SROLL, SNAME, BATCH, CGPA, DEPT_ID, PROGRAM FROM (SELECT SROLL, ROUND(AVG(GPA),2) AS CGPA FROM GPALIST GROUP BY SROLL) 
        NATURAL JOIN STUDENT ORDER BY CGPA DESC;

SELECT * FROM CGPALIST;
 
--BATCH WISE PROGRAM WISE TOPPERS
 
SELECT C.SROLL,C.SNAME, C.BATCH, C.PROGRAM , C.CGPA FROM CGPALIST C WHERE C.DEPT_ID =1 AND 
    (C.BATCH, C.PROGRAM, C.CGPA) IN (SELECT  BATCH,PROGRAM,  MAX(CGPA) FROM CGPALIST GROUP BY BATCH,PROGRAM ) ORDER BY BATCH,PROGRAM;
    
     
select * from cgpalist;

SELECT * FROM STUDENT WHERE DEPT_ID = 1;
SELECT * FROM FACULTY WHERE DEPT_ID = 1;
 
 
SET SERVEROUTPUT ON;   
CREATE OR REPLACE TRIGGER REGISTER_TRIGGER
BEFORE INSERT ON REGISTRATION
FOR EACH ROW
DECLARE
    PROG student.program%TYPE;
    CDEPT INT;
    SDEPT INT;
    PREREQ_NO INT;
    PREREQ_REG INT;
    SEM INT;
    REQYEAR INT;
    SIXPOINTCR INT;
    SBATCH INT;
    x int;
    found int := 0;
    CURRCOURTYPE COURSE.CTYPE%TYPE;
    cursor c1 is SELECT COURSE_ID FROM TEACHES T WHERE T.YEAR LIKE to_char(sysdate, 'YYYY') || '%';
BEGIN 

    SELECT DEPT_ID, PROGRAM, BATCH INTO SDEPT, PROG, SBATCH  FROM STUDENT WHERE SROLL = :NEW.SROLL;    
    SELECT DEPT_ID, CTYPE, SEMNO INTO CDEPT, CURRCOURTYPE , SEM FROM COURSE WHERE   COURSE_ID = :NEW.COURSE_ID;     

    OPEN c1;
    LOOP 
    fetch c1 into x;
    exit when c1%notfound;
        IF X = :NEW.COURSE_ID
        THEN FOUND :=1;
        END IF;
    exit when x = :NEW.COURSE_ID;
    end loop;
    close c1;
--    DBMS_OUTPUT.PUT_LINE(FOUND);
      
    IF CURRCOURTYPE = 'ELECTIVE'
        THEN 
            SELECT COUNT(*) INTO PREREQ_NO FROM PREREQUISITE WHERE COURSE_ID = :NEW.COURSE_ID;
            SELECT COUNT(*) INTO PREREQ_REG FROM REGISTRATION R WHERE R.SROLL = :NEW.SROLL AND  R.course_ID IN 
            (SELECT prerequisite_id FROM PREREQUISITE P WHERE P.COURSE_ID = :NEW.COURSE_ID );            
            IF PREREQ_NO  <> PREREQ_REG
                THEN DBMS_OUTPUT.PUT('NOT REG IN ALL PREREQUISITES ');
                RAISE_APPLICATION_ERROR(-20000, 'Student Cannot be registered because ALL PREREQUISITES ARE NOT MET FOR COURSE ' || :NEW.COURSE_ID || 'REQUIRED: ' || PREREQ_NO || ' but registered in'  || PREREQ_REG);
            END IF;
    ELSIF CURRCOURTYPE = 'CORE' 
        THEN
            SELECT COUNT(*) INTO PREREQ_NO FROM PREREQUISITE WHERE COURSE_ID = :NEW.COURSE_ID; 
            SELECT COUNT(*) INTO SIXPOINTCR FROM 
                (SELECT g.grade from SCORE g,prerequisite p  where  p.COURSE_ID = :NEW.COURSE_ID and g.COURSE_ID=p.COURSE_ID  and g.Sroll= :NEW.SROLL)
                WHERE grade >= 6;
            IF SIXPOINTCR =  PREREQ_NO
            THEN DBMS_OUTPUT.PUT_LINE('ERROR 6POINT RULE  MET FOR COURSE ');
            ELSE DBMS_OUTPUT.PUT_LINE('ERROR 6POINT RULE NOT MET ' || PREREQ_NO || ' reg is '  || SIXPOINTCR);
            RAISE_APPLICATION_ERROR(-20000, 'Student did not score MINIMUM OF 6 POINTS IN A PREREQUISITE FOR THE COURSE ' || :NEW.COURSE_ID );
            END IF;
    END IF;
    IF CDEPT <> 3 AND CDEPT <> SDEPT
        THEN RAISE_APPLICATION_ERROR(-20000, 'You cannot register for courses not offered to you' );
    ELSIF PROG = 'B.Tech' AND CURRCOURTYPE LIKE '%MTECH%'
        THEN RAISE_APPLICATION_ERROR(-20000, 'You cannot register for MTech courses!' );
    ELSIF PROG = 'M.Tech' AND CURRCOURTYPE NOT LIKE '%MTECH%'
        THEN RAISE_APPLICATION_ERROR(-20000, 'You can register ONLY for MTech courses!' );
    ELSIF FOUND = 0
        THEN RAISE_APPLICATION_ERROR(-20222, 'Sorry Course is not offered to you' );
    END IF; 
END;
/
 

SELECT * FROM REGISTRATION where SROLL = '19CS10002';
 INSERT INTO REGISTRATION VALUES ('19CS10002', 37);
 
--DELETE FROM REGISTRATION where SROLL = '19CS10002' AND course_id  = 37  ;

    
CREATE OR REPLACE PROCEDURE compute_grade  
(SROLL IN VARCHAR2 ,SEM IN INT, GPA OUT NUMBER)
AS
BEGIN
    GPA := 0;
    SELECT NVL( ROUND(SUM(GRADE*CREDITS) /SUM(CREDITS) , 2),0) INTO GPA FROM 
         (SELECT  G.GRADE, C.CREDITS FROM SCORE G, COURSE C WHERE C.SEMNO = SEM AND G.SROLL = SROLL AND G.course_id = C.course_id) ;   
--    SELECT GPA INTO CGPA FROM GPALIST WHERE SROLL = ROLL AND SEMNO = SEM;
END compute_grade; 
/

--DROP FUNCTION COMPUTE_GRADE;

SET SERVEROUTPUT ON;
DECLARE 
    ROLLNO VARCHAR2(9);
    SEMNO INT;
    GPA NUMBER;
BEGIN
--    ROLLNO := '&roll';
--    SEMNO := &sem;
compute_grade('19CS01001', 9, GPA);
    DBMS_OUTPUT.PUT_LINE('CGPA FOR GIVEN ROLLNO '|| ROLLNO ||' IN SEM ' || SEMNO || ' IS ' || GPA );
END;
/
 